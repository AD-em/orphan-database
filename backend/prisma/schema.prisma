generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Donor {
  id           Int           @id @default(autoincrement())
  created_at   DateTime?     @default(now())
  updated_at   DateTime?
  companyName  String        @default("")
  nameInitials String        @default("")
  userId       Int           @unique
  user         User          @relation(fields: [userId], references: [id])
  supportPlans SupportPlan[] @relation("donorTosupportplan")
  coordinators Coordinator[] @relation("donorTocoordinator")
  orphans      Orphan[]      @relation("donorToorphan")

  @@map("donor")
}

model EducationalRecord {
  id               Int       @id @default(autoincrement())
  created_at       DateTime? @default(now())
  updated_at       DateTime?
  enrollmentStatus String //education_enrollmentstatus_enum      @default(unenrolled)
  schoolName       String?
  typeOfSchool     String? // education_typeofschool_enum?
  year             String?
  level            String? // education_level_enum?
  reason           String?
  yearDivision     String? // educationalrecord_yeardivision_enum?
  quarter          String? // educationalrecord_quarter_enum?
  semester         String? // educationalrecord_semester_enum?
  totalMark        Float?
  numberOfSubjects Int?
  average          Float?
  rank             Int?
  reportCardUrl    String?
  semesterGPA      Float?
  cumulativeGPA    Float?
  orphanId         Int?
  orphan           Orphan?   @relation("educationToorphan", fields: [orphanId], references: [id])

  @@map("educationalRecord")
}

model Father {
  id                  Int       @id @default(autoincrement())
  created_at          DateTime? @default(now())
  updated_at          DateTime?
  firstName           String    @default("")
  lastName            String    @default("")
  dateOfDeath         DateTime  @default("1970-01-01T00:00:00.000Z")
  causeOfDeath        String    @default("")
  dateOfBirth         DateTime  @default("1970-01-01T00:00:00.000Z")
  deathCertificateUrl String    @default("")
  orphans             Orphan[]  @relation("fatherToorphan")

  @@map("father")
}

model Guardian {
  id                         Int       @id @default(autoincrement())
  created_at                 DateTime? @default(now())
  updated_at                 DateTime?
  firstName                  String    @default("")
  middleName                 String    @default("")
  lastName                   String    @default("")
  gender                     String // guardian_gender_enum           @default(M)
  dateOfBirth                DateTime  @default("1970-01-01T00:00:00.000Z")
  relationToOrphan           String // guardian_relationtoorphan_enum @default(mother)
  email                      String    @default("")
  mobileNumber               String    @default("")
  telephoneNumber            String?
  nationality                String // guardian_nationality_enum      @default(Ethiopian)
  idCardUrl                  String    @default("")
  confirmationLetterUrl      String    @default("")
  legalConfirmationLetterUrl String?   @default("")
  orphans                    Orphan[]  @relation("guardianToorphan")

  @@map("guardian")
}

model Mother {
  id             Int         @id @default(autoincrement())
  created_at     DateTime?   @default(now())
  updated_at     DateTime?
  firstName      String      @default("")
  middleName     String      @default("")
  lastName       String      @default("")
  vitalStatus    String // mother_vitalStatus    @default(alive)
  dateOfBirth    DateTime    @default("1970-01-01T00:00:00.000Z")
  dateOfDeath    DateTime?
  causeOfDeath   String?
  mobileNumber   String      @default("")
  maritalStatus  String? // mother_maritalStatus?
  monthlyExpense Float       @default(0)
  jobs           MotherJob[] @relation("motherTomotherjob")
  orphans        Orphan[]    @relation("motherToorphan")

  @@map("mother")
}

model MotherJob {
  id            Int       @id @default(autoincrement())
  created_at    DateTime? @default(now())
  updated_at    DateTime?
  jobTitle      String?
  monthlyIncome Float?
  startDate     DateTime?
  endDate       DateTime?
  motherId      Int?
  mother        Mother?   @relation("motherTomotherjob", fields: [motherId], references: [id])

  @@map("motherjob")
}

model Region {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now())
  updated_at DateTime?
  name       String    @default("")
  zones      Zone[]

  @@map("region")
}

model Zone {
  id         Int        @id @default(autoincrement())
  created_at DateTime?  @default(now())
  updated_at DateTime?
  name       String     @default("")
  regionId   Int?
  region     Region?    @relation(fields: [regionId], references: [id])
  districts  District[]

  @@map("zone")
}

model District {
  id            Int            @id @default(autoincrement())
  created_at    DateTime?      @default(now())
  updated_at    DateTime?
  name          String         @default("")
  zoneId        Int?
  zone          Zone?          @relation(fields: [zoneId], references: [id])
  villages      Village[]
  socialWorkers SocialWorker[] @relation("districtsSocialWorkers")

  @@map("district")
}

model Village {
  id             Int           @id @default(autoincrement())
  created_at     DateTime?     @default(now())
  updated_at     DateTime?
  name           String?
  districtId     Int?
  socialWorkerId Int?
  socialWorker   SocialWorker? @relation("villageTosocialworker", fields: [socialWorkerId], references: [id])
  district       District?     @relation(fields: [districtId], references: [id])
  projects       Project[]     @relation("projectTovillage")
  orphans        Orphan[]      @relation("orphanTovillage")

  @@map("village")
}

model Orphan {
  id                     Int                 @id @default(autoincrement())
  created_at             DateTime?           @default(now())
  updated_at             DateTime?
  firstName              String              @default("")
  gender                 String // orphan_gender_enum               @default(M)
  placeOfBirth           String              @default("")
  dateOfBirth            DateTime            @default("1970-01-01T00:00:00.000Z")
  spokenLanguages        String?
  gradeAgeMismatchReason String?
  hobbies                String?
  religion               String? // orphan_religion_enum?
  idCardUrl              String?
  passportUrl            String?
  birthCertificateUrl    String              @default("")
  accountNumber          String?
  currentBalance         Float?
  motherId               Int?
  fatherId               Int?
  guardianId             Int?
  educationId            Int?
  villageId              Int?
  socialWorkerId         Int?
  coordinatorId          Int?
  house_propertyId       Int?
  father                 Father?             @relation("fatherToorphan", fields: [fatherId], references: [id])
  guardian               Guardian?           @relation("guardianToorphan", fields: [guardianId], references: [id])
  house_property         House_property?     @relation("house_propertyToorphan", fields: [house_propertyId], references: [id])
  mother                 Mother?             @relation("motherToorphan", fields: [motherId], references: [id])
  village                Village?            @relation("orphanTovillage", fields: [villageId], references: [id])
  socialWorker           SocialWorker?       @relation("orphanTosocialworker", fields: [socialWorkerId], references: [id])
  coordinator            Coordinator?        @relation("orphanTocoordinator", fields: [coordinatorId], references: [id])
  supportPlans           SupportPlan[]       @relation("orphanTosupportplan")
  individualPayments     IndividualPayment[]
  sponsorshipStatuses    SponsorshipStatus[] @relation("orphanTosponsorshipstatus")
  financialRecords       FinancialRecord[]   @relation("financialrecordToorphan")
  educationalRecords     EducationalRecord[] @relation("educationToorphan")
  documents              OrphanDocument[]    @relation("orphanDocumentToorphan")
  healthStatuses         HealthStatus[]      @relation("healthstatusToorphan")
  photos                 OrphanPhoto[]       @relation("orphanToorphanphoto")
  letters                OrphanLetter[]      @relation("orphanLetterToorphan")
  donors                 Donor[]             @relation("donorToorphan")
  siblings               Orphan[]            @relation("orphan_sibling")
  siblingOf              Orphan[]            @relation("orphan_sibling")

  @@map("orphan")
}

model HealthStatus {
  id                  Int       @id @default(autoincrement())
  created_at          DateTime? @default(now())
  updated_at          DateTime?
  healthDescription   String    @default("")
  psychologicalStatus String? // orphan_psychologicalstatus_enum?
  orphanId            Int?
  orphan              Orphan?   @relation("healthstatusToorphan", fields: [orphanId], references: [id])

  @@map("healthStatus")
}

model OrphanLetter {
  id                          Int       @id @default(autoincrement())
  created_at                  DateTime? @default(now())
  updated_at                  DateTime?
  originalThankyouLetterUrl   String?
  translatedThankyouLetterUrl String?
  orphanId                    Int?
  orphan                      Orphan?   @relation("orphanLetterToorphan", fields: [orphanId], references: [id])


  @@map("orphanLetter")
}

model SocialWorker {
  id           Int        @id @default(autoincrement())
  created_at   DateTime?  @default(now())
  updated_at   DateTime?
  firstName    String     @default("")
  middleName   String     @default("")
  lastName     String     @default("")
  gender       String? // socialworker_gender_enum?
  dateOfBirth  DateTime?
  mobileNumber String     @default("")
  startDate    DateTime?
  endDate      DateTime?
  userId       Int        @unique
  user         User       @relation(fields: [userId], references: [id])
  districts    District[] @relation("districtsSocialWorkers")
  villages     Village[]  @relation("villageTosocialworker")
  orphans      Orphan[]   @relation("orphanTosocialworker")

  @@map("socialworker")
}

model FinancialRecord {
  id                Int       @id @default(autoincrement())
  created_at        DateTime? @default(now())
  updated_at        DateTime?
  transactionDate   DateTime?
  transactionType   String? // transaction_type_enum?
  amount            Float?
  reason            String? // financialrecord_reason_enum?
  specialCaseReason String?
  orphanId          Int?
  orphan            Orphan?   @relation("financialrecordToorphan", fields: [orphanId], references: [id])

  @@map("financialrecord")
}

model OrphanDocument {
  id           Int       @id @default(autoincrement())
  created_at   DateTime? @default(now())
  updated_at   DateTime?
  documentUrl  String
  documentType String
  orphanId     Int?
  orphan       Orphan?   @relation("orphanDocumentToorphan", fields: [orphanId], references: [id])

  @@map("orphandocument")
}

model House_property {
  id               Int       @id @default(autoincrement())
  created_at       DateTime? @default(now())
  updated_at       DateTime?
  housingSituation String    @default("")
  otherProperty    String?
  orphans          Orphan[]  @relation("house_propertyToorphan")

  @@map("house_property")
}

model OrphanPhoto {
  id               Int       @id @default(autoincrement())
  created_at       DateTime? @default(now())
  updated_at       DateTime?
  photoPortraitUrl String    @default("")
  photoLongUrl     String?
  orphanId         Int?
  orphan           Orphan?   @relation("orphanToorphanphoto", fields: [orphanId], references: [id])

  @@map("orphanphoto")
}

model SponsorshipStatus {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now())
  updated_at DateTime?
  status     String? // sponsorshipstatus_enum? @default(new)
  date       DateTime  @default("1970-01-01T00:00:00.000Z")
  reason     String?
  orphanId   Int?
  orphan     Orphan?   @relation("orphanTosponsorshipstatus", fields: [orphanId], references: [id])

  @@map("sponsorshipstatus")
}

model Project {
  id                           Int                        @id @default(autoincrement())
  created_at                   DateTime?                  @default(now())
  updated_at                   DateTime?
  number                       String
  startDate                    DateTime?
  endDate                      DateTime?
  maximumNumberOfBeneficiaries Int
  durationInYears              Int
  location                     Village[]                  @relation("projectTovillage")
  grandTotalBudget             Float                      @default(0)
  administrativeCost           Float
  status                       String                     @default("new")
  supportPlans                 SupportPlan[]              @relation("projectTosupportplan")
  coordinators                 Coordinator[]
  projectDocuments             ProjectDocument[]
  incomeGeneratingActivities   IncomeGeneratingActivity[]

  @@map("project")
}

model ProjectDocument {
  id           Int       @id @default(autoincrement())
  created_at   DateTime? @default(now())
  updated_at   DateTime?
  documentUrl  String
  documentType String
  projectId    Int?
  project      Project?  @relation(fields: [projectId], references: [id])

  @@map("projectDocument")
}

model IncomeGeneratingActivity {
  id              Int                             @id @default(autoincrement())
  created_at      DateTime?                       @default(now())
  updated_at      DateTime?
  beneficiaryType String
  activityType    String
  firstName       String                          @default("")
  middleName      String                          @default("")
  lastName        String                          @default("")
  budget          Float
  title           String
  description     String
  startDate       DateTime?
  endDate         DateTime?
  status          String
  projectId       Int?
  project         Project?                        @relation(fields: [projectId], references: [id])
  photos          IncomeGeneratingActivityPhoto[]

  @@map("incomeGeneratingActivity")
}

model IncomeGeneratingActivityPhoto {
  id                         Int                       @id @default(autoincrement())
  created_at                 DateTime?                 @default(now())
  updated_at                 DateTime?
  photoUrl                   String
  incomeGeneratingActivityId Int?
  incomeGeneratingActivity   IncomeGeneratingActivity? @relation(fields: [incomeGeneratingActivityId], references: [id])


  @@map("incomeGeneratingActivityPhoto")
}

model SupportPlan {
  id                 Int       @id @default(autoincrement())
  created_at         DateTime? @default(now())
  updated_at         DateTime?
  name               String
  adminFeePercentage Float
  paymentInterval    String
  totalFund          Float     @default(0)
  startDate          DateTime?
  endDate            DateTime?
  donorId            Int?
  projectId          Int?
  donor              Donor?    @relation("donorTosupportplan", fields: [donorId], references: [id])
  project            Project?  @relation("projectTosupportplan", fields: [projectId], references: [id])
  payments           Payment[] @relation("supportplanTopayment")
  orphans            Orphan[]  @relation("orphanTosupportplan")

  @@map("supportplan")
}

model Payment {
  id                                Int                 @id @default(autoincrement())
  created_at                        DateTime?           @default(now())
  updated_at                        DateTime?
  startDate                         DateTime?
  endDate                           DateTime?
  paymentInPrimaryForeignCurrency   Float?
  primaryForeignCurrency            String?
  primaryExchangeRate               Float?
  paymentInSecondaryForeignCurrency Float?
  secondaryForeignCurrency          String?
  secondaryExchangeRate             Float?
  grossPaymentInDomesticCurrency    Float
  adminFeeInDomesticCurrency        Float
  netPaymentInDomesticCurrency      Float
  paymentPeriodInMonths             Int
  supportPlanId                     Int?
  supportPlan                       SupportPlan?        @relation("supportplanTopayment", fields: [supportPlanId], references: [id])
  individualPayments                IndividualPayment[]

  @@map("payment")
}

model IndividualPayment {
  id                                Int       @id @default(autoincrement())
  created_at                        DateTime? @default(now())
  updated_at                        DateTime?
  depositInPrimaryForeignCurrency   Float?
  depositInSecondaryForeignCurrency Float?
  grossDepositInDomesticCurrency    Float
  adminFeeInDomesticCurrency        Float
  netDepositInDomesticCurrency      Float
  orphanId                          Int?
  paymentId                         Int?
  orphan                            Orphan?   @relation(fields: [orphanId], references: [id])
  payment                           Payment?  @relation(fields: [paymentId], references: [id])


  @@map("individualPayment")
}

model Head {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now())
  updated_at DateTime?
  firstName  String    @default("")
  middleName String    @default("")
  lastName   String    @default("")
  userId     Int       @unique
  user       User      @relation(fields: [userId], references: [id])

  @@map("head")
}

model Coordinator {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now())
  updated_at DateTime?
  firstName  String    @default("")
  middleName String    @default("")
  lastName   String    @default("")
  userId     Int       @unique
  user       User      @relation(fields: [userId], references: [id])
  donors     Donor[]   @relation("donorTocoordinator")
  projects   Project[]
  orphans    Orphan[]  @relation("orphanTocoordinator")

  @@map("coordinator")
}

model User {
  id           Int           @id @default(autoincrement())
  created_at   DateTime?     @default(now())
  updated_at   DateTime?
  role         String // userRoles_enum @default(Guest)
  email        String        @unique @default("")
  password     String?
  coordinator  Coordinator?
  head         Head?
  socialWorker SocialWorker?
  donor        Donor?

  @@map("user")
}

model AccountMaintainence {
  id           Int       @id @default(autoincrement())
  created_at   DateTime? @default(now())
  updated_at   DateTime?
  type         String // accountMaintainenceType_enum   @default(register)
  status       String // accountMaintainenceStatus_enum @default(pending)
  role         String // userRoles_enum                 @default(SocialWorker)
  firstName    String    @default("")
  middleName   String    @default("")
  lastName     String    @default("")
  email        String    @default("")
  mobileNumber String    @default("")

  @@map("accountMaintainence")
}

enum accountMaintainenceStatus_enum {
  pending
  approved
  rejected
}

enum accountMaintainenceType_enum {
  register
  passwordRecovery
}

enum education_enrollmentstatus_enum {
  enrolled
  unenrolled
  droppedout
}

enum education_level_enum {
  religiousEducation
  preSchool
  primary_elementary  @map("primary/elementary")
  junior
  highschool
  underGraduate
  postGraduate
  N_A                 @map("N/A")
}

enum education_typeofschool_enum {
  private
  public
  N_A      @map("N/A")
}

enum educationalrecord_quarter_enum {
  first
  second
  third
  fourth
}

enum educationalrecord_semester_enum {
  first
  second
}

enum educationalrecord_yeardivision_enum {
  semester
  quarter_term
}

enum financialrecord_reason_enum {
  ASFC
  RSFC
  AAB
  AFB
  NPB
  EW
  HW
  NW
  SCW
}

enum guardian_gender_enum {
  M
  F
}

enum guardian_relationtoorphan_enum {
  mother
  grandmother
  grandfather
  sister
  brother
  uncle
  aunt
  cousin
  niece
  nephew
  legalGuardian
  other
}

enum guardian_nationality_enum {
  Djiboutian
  Ethiopian
  Eritrean
  Kenyan
  Somali
  South_Sudanese
  Sudanese
}

enum mother_maritalStatus {
  married
  widow
  N_A      @map("N/A")
}

enum mother_vitalStatus {
  passed
  alive
}

enum orphan_gender_enum {
  M
  F
}

enum orphan_psychologicalstatus_enum {
  isolated
  stressed
  unsociable
  overlysociable
  normal
}

enum orphan_religion_enum {
  Christianity
  Islam
  Buddhism
  Hinduism
  Judaism
  Other
}

enum socialworker_gender_enum {
  M
  F
}

enum sponsorshipstatus_enum {
  new
  processing
  pending
  active
  graduated
}

enum transaction_type_enum {
  withdrawal
  deposit
  assign
  re_assign
}

enum userRoles_enum {
  Admin
  Head
  Coordinator
  Donor
  SocialWorker
  Guest
}
