generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Donor {
  id           Int           @id @default(autoincrement())
  created_at   DateTime?     @default(now())
  updated_at   DateTime?
  companyName  String        @default("")
  nameInitials String        @default("")
  userId       Int           @unique
  user         User          @relation(fields: [userId], references: [id])
  supportPlans SupportPlan[] @relation("donorTosupportplan")
  coordinators Coordinator[] @relation("donorTocoordinator")
  orphans      Orphan[]      @relation("donorToorphan")

  @@map("donor")
}

model EducationalRecord {
  id               Int               @id @default(autoincrement())
  created_at       DateTime?         @default(now())
  updated_at       DateTime?
  enrollmentStatus String
  schoolName       String?
  typeOfSchool     String?
  year             String?
  level            String?
  reason           String?
  yearDivision     String?
  quarter          String?
  semester         String?
  totalMark        Float?
  numberOfSubjects Int?
  average          Float?
  rank             Int?
  reportCardUrl    String?
  semesterGPA      Float?
  cumulativeGPA    Float?
  orphanId         Int?
  orphan           Orphan?           @relation("educationToorphan", fields: [orphanId], references: [id])
  latestOrphanData LatestOrphanData?

  @@map("educationalRecord")
}

model Father {
  id                  Int       @id @default(autoincrement())
  created_at          DateTime? @default(now())
  updated_at          DateTime?
  firstName           String    @default("")
  lastName            String    @default("")
  dateOfDeath         DateTime  @default(dbgenerated("'1970-01-01 00:00:00'::timestamp without time zone"))
  causeOfDeath        String    @default("")
  dateOfBirth         DateTime?
  deathCertificateUrl String    @default("")
  orphans             Orphan[]  @relation("fatherToorphan")

  @@map("father")
}

model Guardian {
  id                         Int       @id @default(autoincrement())
  created_at                 DateTime? @default(now())
  updated_at                 DateTime?
  firstName                  String    @default("")
  middleName                 String    @default("")
  lastName                   String    @default("")
  gender                     String    @default("M")
  dateOfBirth                DateTime  @default(dbgenerated("'1970-01-01 00:00:00'::timestamp without time zone"))
  relationToOrphan           String    @default("mother")
  email                      String    @default("")
  mobileNumber               String    @default("")
  telephoneNumber            String?
  nationality                String    @default("Ethiopian")
  idCardUrl                  String    @default("")
  confirmationLetterUrl      String?   @default("")
  legalConfirmationLetterUrl String?   @default("")
  orphans                    Orphan[]  @relation("guardianToorphan")

  @@map("guardian")
}

model Mother {
  id             Int         @id @default(autoincrement())
  created_at     DateTime?   @default(now())
  updated_at     DateTime?
  firstName      String      @default("")
  middleName     String      @default("")
  lastName       String      @default("")
  vitalStatus    String      @default("alive")
  dateOfBirth    DateTime?
  dateOfDeath    DateTime?
  causeOfDeath   String?
  mobileNumber   String      @default("")
  maritalStatus  String?
  monthlyExpense Float       @default(0)
  jobs           MotherJob[] @relation("motherTomotherjob")
  orphans        Orphan[]    @relation("motherToorphan")

  @@map("mother")
}

model MotherJob {
  id            Int       @id @default(autoincrement())
  created_at    DateTime? @default(now())
  updated_at    DateTime?
  jobTitle      String?
  monthlyIncome Float?
  startDate     DateTime?
  endDate       DateTime?
  motherId      Int?
  mother        Mother?   @relation("motherTomotherjob", fields: [motherId], references: [id])

  @@map("motherjob")
}

model Region {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now())
  updated_at DateTime?
  name       String    @default("")
  zones      Zone[]

  @@map("region")
}

model Zone {
  id         Int        @id @default(autoincrement())
  created_at DateTime?  @default(now())
  updated_at DateTime?
  name       String     @default("")
  regionId   Int?
  region     Region?    @relation(fields: [regionId], references: [id])
  districts  District[]

  @@map("zone")
}

model District {
  id            Int            @id @default(autoincrement())
  created_at    DateTime?      @default(now())
  updated_at    DateTime?
  name          String         @default("")
  zoneId        Int?
  zone          Zone?          @relation(fields: [zoneId], references: [id])
  villages      Village[]
  socialWorkers SocialWorker[] @relation("districtsSocialWorkers")

  @@map("district")
}

model Village {
  id             Int           @id @default(autoincrement())
  created_at     DateTime?     @default(now())
  updated_at     DateTime?
  name           String?
  districtId     Int?
  socialWorkerId Int?
  district       District?     @relation(fields: [districtId], references: [id])
  socialWorker   SocialWorker? @relation("villageTosocialworker", fields: [socialWorkerId], references: [id])
  orphans        Orphan[]      @relation("orphanTovillage")
  projects       Project[]     @relation("projectTovillage")

  @@map("village")
}

model CurrentOrphanData {
  id                  Int               @id @default(autoincrement())
  created_at          DateTime?         @default(now())
  updated_at          DateTime?
  balance             Float?
  sponsorshipStatus   SponsorshipStatus @relation(fields: [sponsorshipStatusId], references: [id])
  orphan              Orphan            @relation(fields: [orphanId], references: [id])
  orphanId            Int               @unique
  sponsorshipStatusId Int               @unique

  @@map("currentOrphanData")
}

model LatestOrphanData {
  id                  Int               @id @default(autoincrement())
  created_at          DateTime?         @default(now())
  updated_at          DateTime?
  educationalRecord   EducationalRecord @relation(fields: [educationalRecordId], references: [id])
  orphan              Orphan            @relation(fields: [orphanId], references: [id])
  orphanId            Int               @unique
  educationalRecordId Int               @unique

  @@map("latestOrphanData")
}

model Orphan {
  id                     Int                 @id @default(autoincrement())
  created_at             DateTime?           @default(now())
  updated_at             DateTime?
  firstName              String              @default("")
  gender                 String              @default("M")
  placeOfBirth           String              @default("")
  dateOfBirth            DateTime            @default(dbgenerated("'1970-01-01 00:00:00'::timestamp without time zone"))
  spokenLanguages        String?
  gradeAgeMismatchReason String?
  hobbies                String?
  religion               String?
  idCardUrl              String?
  passportUrl            String?
  birthCertificateUrl    String              @default("")
  accountNumber          String?
  motherId               Int?
  fatherId               Int?
  guardianId             Int?
  educationId            Int?
  villageId              Int?
  socialWorkerId         Int?
  coordinatorId          Int?
  house_propertyId       Int?
  orphanCode             String?
  coordinator            Coordinator?        @relation("orphanTocoordinator", fields: [coordinatorId], references: [id])
  father                 Father?             @relation("fatherToorphan", fields: [fatherId], references: [id])
  guardian               Guardian?           @relation("guardianToorphan", fields: [guardianId], references: [id])
  house_property         House_property?     @relation("house_propertyToorphan", fields: [house_propertyId], references: [id])
  mother                 Mother?             @relation("motherToorphan", fields: [motherId], references: [id])
  socialWorker           SocialWorker?       @relation("orphanTosocialworker", fields: [socialWorkerId], references: [id])
  village                Village?            @relation("orphanTovillage", fields: [villageId], references: [id])
  educationalRecords     EducationalRecord[] @relation("educationToorphan")
  financialRecords       FinancialRecord[]   @relation("financialrecordToorphan")
  healthStatuses         HealthStatus[]      @relation("healthstatusToorphan")
  individualPayments     IndividualPayment[]
  letters                OrphanLetter[]      @relation("orphanLetterToorphan")
  documents              OrphanDocument[]    @relation("orphanDocumentToorphan")
  photos                 OrphanPhoto[]       @relation("orphanToorphanphoto")
  sponsorshipStatuses    SponsorshipStatus[] @relation("orphanTosponsorshipstatus")
  donors                 Donor[]             @relation("donorToorphan")
  supportPlans           SupportPlan[]       @relation("orphanTosupportplan")
  siblings               Orphan[]            @relation("orphan_sibling")
  siblingOf              Orphan[]            @relation("orphan_sibling")
  currentOrphanData      CurrentOrphanData?
  latestOrphanData       LatestOrphanData?

  @@map("orphan")
}

model HealthStatus {
  id                  Int       @id @default(autoincrement())
  created_at          DateTime? @default(now())
  updated_at          DateTime?
  healthDescription   String    @default("")
  psychologicalStatus String?
  orphanId            Int?
  orphan              Orphan?   @relation("healthstatusToorphan", fields: [orphanId], references: [id])

  @@map("healthStatus")
}

model OrphanLetter {
  id                          Int       @id @default(autoincrement())
  created_at                  DateTime? @default(now())
  updated_at                  DateTime?
  originalThankyouLetterUrl   String?
  translatedThankyouLetterUrl String?
  orphanId                    Int?
  orphan                      Orphan?   @relation("orphanLetterToorphan", fields: [orphanId], references: [id])

  @@map("orphanLetter")
}

model SocialWorker {
  id                Int               @id @default(autoincrement())
  created_at        DateTime?         @default(now())
  updated_at        DateTime?
  firstName         String            @default("")
  middleName        String            @default("")
  lastName          String            @default("")
  gender            String?
  dateOfBirth       DateTime?
  mobileNumber      String            @default("")
  startDate         DateTime?
  endDate           DateTime?
  userId            Int               @unique
  user              User              @relation(fields: [userId], references: [id])
  orphans           Orphan[]          @relation("orphanTosocialworker")
  projectActivities ProjectActivity[]
  villages          Village[]         @relation("villageTosocialworker")
  districts         District[]        @relation("districtsSocialWorkers")

  @@map("socialworker")
}

model FinancialRecord {
  id                Int       @id @default(autoincrement())
  created_at        DateTime? @default(now())
  updated_at        DateTime?
  transactionDate   DateTime?
  transactionType   String?
  amount            Float?
  reason            String?
  specialCaseReason String?
  orphanId          Int?
  orphan            Orphan?   @relation("financialrecordToorphan", fields: [orphanId], references: [id])

  @@map("financialrecord")
}

model OrphanDocument {
  id           Int       @id @default(autoincrement())
  created_at   DateTime? @default(now())
  updated_at   DateTime?
  documentUrl  String
  documentType String
  orphanId     Int?
  orphan       Orphan?   @relation("orphanDocumentToorphan", fields: [orphanId], references: [id])

  @@map("orphandocument")
}

model House_property {
  id               Int       @id @default(autoincrement())
  created_at       DateTime? @default(now())
  updated_at       DateTime?
  housingSituation String    @default("")
  otherProperty    String?
  houseType        String?
  orphans          Orphan[]  @relation("house_propertyToorphan")

  @@map("house_property")
}

model OrphanPhoto {
  id               Int       @id @default(autoincrement())
  created_at       DateTime? @default(now())
  updated_at       DateTime?
  photoPortraitUrl String    @default("")
  photoLongUrl     String?
  orphanId         Int?
  orphan           Orphan?   @relation("orphanToorphanphoto", fields: [orphanId], references: [id])

  @@map("orphanphoto")
}

model SponsorshipStatus {
  id                Int                @id @default(autoincrement())
  created_at        DateTime?          @default(now())
  updated_at        DateTime?
  status            String?
  date              DateTime           @default(dbgenerated("'1970-01-01 00:00:00'::timestamp without time zone"))
  reason            String?
  orphanId          Int?
  orphan            Orphan?            @relation("orphanTosponsorshipstatus", fields: [orphanId], references: [id])
  currentOrphanData CurrentOrphanData?

  @@map("sponsorshipstatus")
}

model ProjectActivity {
  id                Int             @id @default(autoincrement())
  created_at        DateTime?       @default(now())
  updated_at        DateTime?
  title             String
  category          String
  unitOfMeasurement String
  planOfAYear       String
  planOfSixMonths   String
  planOfAQuarter    String
  planOfAMonth      String
  projectId         Int
  socialWorkerId    Int
  project           Project         @relation(fields: [projectId], references: [id])
  socialWorker      SocialWorker    @relation(fields: [socialWorkerId], references: [id])
  dailyActivities   DailyActivity[]

  @@map("projectActivity")
}

model DailyActivity {
  id                       Int             @id @default(autoincrement())
  created_at               DateTime?       @default(now())
  updated_at               DateTime?
  planOfADay               Float
  accomplishmentAmount     Float
  accomplishmentPercentage Float
  activityId               Int
  projectActivity          ProjectActivity @relation(fields: [activityId], references: [id])

  @@map("dailyAccomplishment")
}

model Project {
  id                           Int                        @id @default(autoincrement())
  created_at                   DateTime?                  @default(now())
  updated_at                   DateTime?
  number                       String
  startDate                    DateTime?
  endDate                      DateTime?
  maximumNumberOfBeneficiaries Int
  durationInYears              Int
  grandTotalBudget             Float                      @default(0)
  administrativeCost           Float
  status                       String                     @default("new")
  incomeGeneratingActivities   IncomeGeneratingActivity[]
  projectActivities            ProjectActivity[]
  projectDocuments             ProjectDocument[]
  supportPlans                 SupportPlan[]              @relation("projectTosupportplan")
  coordinators                 Coordinator[]
  location                     Village[]                  @relation("projectTovillage")

  @@map("project")
}

model ProjectDocument {
  id           Int       @id @default(autoincrement())
  created_at   DateTime? @default(now())
  updated_at   DateTime?
  documentUrl  String
  documentType String
  projectId    Int?
  project      Project?  @relation(fields: [projectId], references: [id])

  @@map("projectDocument")
}

model IncomeGeneratingActivity {
  id              Int                             @id @default(autoincrement())
  created_at      DateTime?                       @default(now())
  updated_at      DateTime?
  beneficiaryType String
  activityType    String
  firstName       String                          @default("")
  middleName      String                          @default("")
  lastName        String                          @default("")
  budget          Float
  title           String
  description     String
  startDate       DateTime?
  endDate         DateTime?
  status          String
  projectId       Int?
  project         Project?                        @relation(fields: [projectId], references: [id])
  photos          IncomeGeneratingActivityPhoto[]

  @@map("incomeGeneratingActivity")
}

model IncomeGeneratingActivityPhoto {
  id                         Int                       @id @default(autoincrement())
  created_at                 DateTime?                 @default(now())
  updated_at                 DateTime?
  photoUrl                   String
  incomeGeneratingActivityId Int?
  incomeGeneratingActivity   IncomeGeneratingActivity? @relation(fields: [incomeGeneratingActivityId], references: [id])

  @@map("incomeGeneratingActivityPhoto")
}

model SupportPlan {
  id                 Int       @id @default(autoincrement())
  created_at         DateTime? @default(now())
  updated_at         DateTime?
  name               String
  adminFeePercentage Float
  paymentInterval    String
  totalFund          Float     @default(0)
  startDate          DateTime?
  endDate            DateTime?
  donorId            Int?
  projectId          Int?
  donor              Donor?    @relation("donorTosupportplan", fields: [donorId], references: [id])
  project            Project?  @relation("projectTosupportplan", fields: [projectId], references: [id])
  payments           Payment[] @relation("supportplanTopayment")
  orphans            Orphan[]  @relation("orphanTosupportplan")

  @@map("supportplan")
}

model Payment {
  id                                Int                 @id @default(autoincrement())
  created_at                        DateTime?           @default(now())
  updated_at                        DateTime?
  startDate                         DateTime?
  endDate                           DateTime?
  paymentInPrimaryForeignCurrency   Float?
  primaryForeignCurrency            String?
  primaryExchangeRate               Float?
  paymentInSecondaryForeignCurrency Float?
  secondaryForeignCurrency          String?
  secondaryExchangeRate             Float?
  grossPaymentInDomesticCurrency    Float
  adminFeeInDomesticCurrency        Float
  netPaymentInDomesticCurrency      Float
  paymentPeriodInMonths             Int
  supportPlanId                     Int?
  supportPlan                       SupportPlan?        @relation("supportplanTopayment", fields: [supportPlanId], references: [id])
  individualPayments                IndividualPayment[]

  @@map("payment")
}

model IndividualPayment {
  id                                Int       @id @default(autoincrement())
  created_at                        DateTime? @default(now())
  updated_at                        DateTime?
  depositInPrimaryForeignCurrency   Float?
  depositInSecondaryForeignCurrency Float?
  grossDepositInDomesticCurrency    Float
  adminFeeInDomesticCurrency        Float
  netDepositInDomesticCurrency      Float
  orphanId                          Int?
  paymentId                         Int?
  orphan                            Orphan?   @relation(fields: [orphanId], references: [id])
  payment                           Payment?  @relation(fields: [paymentId], references: [id])

  @@map("individualPayment")
}

model Head {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now())
  updated_at DateTime?
  firstName  String    @default("")
  middleName String    @default("")
  lastName   String    @default("")
  userId     Int       @unique
  user       User      @relation(fields: [userId], references: [id])

  @@map("head")
}

model Coordinator {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(now())
  updated_at DateTime?
  firstName  String    @default("")
  middleName String    @default("")
  lastName   String    @default("")
  userId     Int       @unique
  user       User      @relation(fields: [userId], references: [id])
  orphans    Orphan[]  @relation("orphanTocoordinator")
  projects   Project[]
  donors     Donor[]   @relation("donorTocoordinator")

  @@map("coordinator")
}

model User {
  id           Int           @id @default(autoincrement())
  created_at   DateTime?     @default(now())
  updated_at   DateTime?
  role         String        @default("Guest")
  email        String        @unique @default("")
  password     String?
  coordinator  Coordinator?
  donor        Donor?
  head         Head?
  socialWorker SocialWorker?

  @@map("user")
}

model AccountMaintainence {
  id           Int       @id @default(autoincrement())
  created_at   DateTime? @default(now())
  updated_at   DateTime?
  type         String    @default("register")
  status       String    @default("pending")
  role         String    @default("SocialWorker")
  firstName    String    @default("")
  middleName   String    @default("")
  lastName     String    @default("")
  email        String    @default("")
  mobileNumber String    @default("")

  @@map("accountMaintainence")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}
