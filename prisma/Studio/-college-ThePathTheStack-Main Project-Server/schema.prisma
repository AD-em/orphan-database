generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Donor {
  id                           Int              @id @default(autoincrement())
  created_at                   DateTime?        @default(dbgenerated())
  updated_at                   DateTime?
  companyName                  String
  initialReportPreparationDate DateTime?
  finalReportPreparationDate   DateTime?
  initialDataCollectionDate    DateTime?
  finalDataCollectionDate      DateTime?
  reportDueDate                DateTime?
  Orphan                       Orphan[]
  sponsoredgroups              SponsoredGroup[]

  @@map("donor")
}

model Education {
  id               Int                        @id @default(autoincrement())
  created_at       DateTime?                  @default(dbgenerated())
  updated_at       DateTime?
  enrollmentStatus education_enrollmentStatus
  schoolName       String?
  typeOfSchool     education_typeOfSchool?
  year             String?
  level            education_level?
  reason           String?
  orphan           Orphan[]

  @@map("education")
}

model EducationalSupport {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(dbgenerated())
  updated_at DateTime?
  support    Support[]

  @@map("educationalsupport")
}

model Father {
  id                  Int       @id @default(autoincrement())
  created_at          DateTime? @default(dbgenerated())
  updated_at          DateTime?
  dateOfDeath         DateTime
  causeOfDeath        String
  job                 String?
  monthlyIncome       Int
  dateOfBirth         DateTime
  deathCertificateUrl String
  orphans             Orphan[]

  @@map("father")
}

model FinancialSupport {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(dbgenerated())
  updated_at DateTime?
  support    Support[]

  @@map("financialsupport")
}

model Guardian {
  id                            Int                       @id @default(autoincrement())
  created_at                    DateTime?                 @default(dbgenerated())
  updated_at                    DateTime?
  firstName                     String
  middleName                    String
  lastName                      String
  gender                        guardian_gender
  nationality                   String
  state                         String
  zone                          String
  district                      String
  kebele                        String
  relationToOrphan              guardian_relationToOrphan
  telephone                     String?
  mobile                        String
  email                         String
  POBox                         String?
  job                           String?
  dateOfBirth                   DateTime
  monthlyExpense                Float
  guardianIDCardUrl             String
  guardianConfirmationLetterUrl String
  orphans                       Orphan[]

  @@map("guardian")
}

model Iga_property {
  id              Int       @id @default(autoincrement())
  created_at      DateTime? @default(dbgenerated())
  updated_at      DateTime?
  ownershipStatus String
  otherProperty   String?
  orphan          Orphan[]

  @@map("iga_property")
}

model Mother {
  id             Int                  @id @default(autoincrement())
  created_at     DateTime?            @default(dbgenerated())
  updated_at     DateTime?
  firstName      String
  middleName     String
  lastName       String
  vitalStatus    mother_vitalStatus
  dateOfBirth    DateTime
  dateOfDeath    DateTime?
  causeOfDeath   String?
  phoneNumber    String
  maritalStatus  mother_maritalStatus
  monthlyExpense Float
  motherJob      MotherJob?
  orphans        Orphan[]

  @@map("mother")
}

model MotherJob {
  id              Int       @id @default(autoincrement())
  created_at      DateTime? @default(dbgenerated())
  updated_at      DateTime?
  currentJobTitle String?
  monthlyIncome   Float?
  initDate        DateTime?
  termDate        DateTime?
  motherId        Int?
  mother          Mother    @relation(fields: [id], references: [id])

  @@map("motherjob")
}

model OfficialDocuments {
  id                  Int       @id @default(autoincrement())
  created_at          DateTime? @default(dbgenerated())
  updated_at          DateTime?
  photoPortraitUrl    String
  photoLongUrl        String
  birthCertificateUrl String
  orphan              Orphan[]

  @@map("officialdocuments")
}

model Orphan {
  id                        Int                       @id @default(autoincrement())
  created_at                DateTime?                 @default(dbgenerated())
  updated_at                DateTime?
  firstName                 String
  fatherName                String
  grandFatherName           String
  greatGrandFatherName      String
  gender                    orphan_gender
  placeOfBirth              String
  dateOfBirth               DateTime
  clan                      String?
  spokenLanguages           String?
  numberOfSponserdSiblings  Int
  physicalHealthStatus      String
  psychologicalHealthStatus String
  otherHealthIssues         String
  hobbies                   String?
  sponsorshipStatus         orphan_sponsorshipStatus? @default(inProgress)
  sponsoredDate             DateTime?
  fatherId                  Int?
  motherId                  Int?
  guardianId                Int?
  IGA_PropertyId            Int?
  educationId               Int?
  docsId                    Int?
  donorId                   Int?
  siteId                    Int?
  sponsrGroupId             Int?
  iga_property              Iga_property?             @relation(fields: [IGA_PropertyId], references: [id])
  officialdocuments         OfficialDocuments?        @relation(fields: [docsId], references: [id])
  Donor                     Donor?                    @relation(fields: [donorId], references: [id])
  education                 Education?                @relation(fields: [educationId], references: [id])
  father                    Father?                   @relation(fields: [fatherId], references: [id])
  guardian                  Guardian?                 @relation(fields: [guardianId], references: [id])
  mother                    Mother?                   @relation(fields: [motherId], references: [id])
  site                      Site?                     @relation(fields: [siteId], references: [id])
  sponsoredgroup            SponsoredGroup?           @relation(fields: [sponsrGroupId], references: [id])
  siblings                  Sibling[]

  @@index([IGA_PropertyId], name: "IGA_PropertyId")
  @@index([docsId], name: "docsId")
  @@index([donorId], name: "donorId")
  @@index([educationId], name: "educationId")
  @@index([fatherId], name: "fatherId")
  @@index([guardianId], name: "guardianId")
  @@index([motherId], name: "motherId")
  @@index([siteId], name: "siteId")
  @@index([sponsrGroupId], name: "sponsrGroupId")
  @@map("orphan")
}

model OtherSupport {
  id         Int       @id @default(autoincrement())
  created_at DateTime? @default(dbgenerated())
  updated_at DateTime?
  support    Support[]

  @@map("othersupport")
}

model Sibling {
  id            Int            @id @default(autoincrement())
  created_at    DateTime?      @default(dbgenerated())
  updated_at    DateTime?
  fullName      String
  gender        sibling_gender
  age           Int
  schoolGrade   String?
  job           String?
  maritalStatus String
  orphanId      Int?
  orphan        Orphan?        @relation(fields: [orphanId], references: [id])

  @@index([orphanId], name: "orphanId")
  @@map("sibling")
}

model SocialWorker {
  id             Int             @id @default(autoincrement())
  created_at     DateTime?       @default(dbgenerated())
  updated_at     DateTime?
  fullName       String
  phoneNumber    String
  email          String
  sponsrGroupId  Int?
  sponsoredgroup SponsoredGroup? @relation(fields: [sponsrGroupId], references: [id])

  @@index([sponsrGroupId], name: "sponsrGroupId")
  @@map("socialworker")
}

model SponsoredGroup {
  id              Int            @id @default(autoincrement())
  created_at      DateTime?      @default(dbgenerated())
  updated_at      DateTime?
  sponsorshipDate DateTime
  supportId       Int?
  siteId          Int?
  donorId         Int?
  donor           Donor?         @relation(fields: [donorId], references: [id])
  site            Site?          @relation(fields: [siteId], references: [id])
  support         Support?       @relation(fields: [supportId], references: [id])
  orphans         Orphan[]
  socialworkers   SocialWorker[]

  @@index([donorId], name: "donorId")
  @@index([siteId], name: "siteId")
  @@index([supportId], name: "supportId")
  @@map("sponsoredgroup")
}

model Support {
  id                 Int                 @id @default(autoincrement())
  created_at         DateTime?           @default(dbgenerated())
  updated_at         DateTime?
  status             String?
  financialId        Int?
  educationalId      Int?
  otherId            Int?
  educationalsupport EducationalSupport? @relation(fields: [educationalId], references: [id])
  financialsupport   FinancialSupport?   @relation(fields: [financialId], references: [id])
  othersupport       OtherSupport?       @relation(fields: [otherId], references: [id])
  sponsoredgroup     SponsoredGroup[]

  @@index([educationalId], name: "educationalId")
  @@index([financialId], name: "financialId")
  @@index([otherId], name: "otherId")
  @@map("support")
}

model Site {
  id               Int              @id @default(autoincrement())
  created_at       DateTime?        @default(dbgenerated())
  updated_at       DateTime?
  registrationDate DateTime
  siteName         String
  state            String
  zone             String
  district         String
  kebele           String
  orphan           Orphan[]
  sponsoredgroups  SponsoredGroup[]

  @@map("site")
}

enum education_enrollmentStatus {
  enrolled
  unenrolled
  droppedout
}

enum education_typeOfSchool {
  private
  public
}

enum orphan_gender {
  M
  F
}

enum education_level {
  preSchool
  gradeSchool
  underGraduate
  postGraduate
}

enum guardian_gender {
  M
  F
}

enum guardian_relationToOrphan {
  mother
  grandmother
  grandfather
  sister
  brother
  uncle
  aunt
  cousin
  niece
  nephew
}

enum mother_maritalStatus {
  remarried
  widow
  divorcedthendead
}

enum mother_vitalStatus {
  alive
  passed
}

enum orphan_sponsorshipStatus {
  inProgress
  active
  suspended
  graduated
}

enum sibling_gender {
  M
  F
}
